import React, { useState } from 'react';
import type { NativeStackScreenProps } from '@react-navigation/native-stack';
import { View, Text, TextInput, TouchableOpacity, ScrollView } from 'react-native';

import { text } from '../text';
import { svg } from '../assets/svg';
import { theme } from '../constants';
import { components } from '../components';
import type { RootStackParamList } from '../types';
import { useGetProductsQuery, useGetCategoriesQuery } from '../store/slices/apiSlice';
import { addToCart } from '../store/slices/cartSlice';
import { useAppDispatch } from '../hooks';

type Props = NativeStackScreenProps<RootStackParamList, 'Menulist'>;

const Menulist: React.FC<Props> = ({ route }): JSX.Element => {
  const { category } = route.params;

  const dispatch = useAppDispatch();

  const [loading, setLoading] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState(category || '');
  const [selectedTab, setSelectedTab] = useState<'services' | 'products'>('services');
  
  const {
    data: productsData,
    error: productsError,
    isLoading: productsLoading,
  } = useGetProductsQuery();
  const {
    data: categoriesData,
    error: categoriesError,
    isLoading: categoriesLoading,
  } = useGetCategoriesQuery();

  const services = productsData instanceof Array ? productsData : [];
  const categories = categoriesData instanceof Array ? categoriesData : [];
  
  // State to manage quantity of each item
  const [quantities, setQuantities] = useState<{ [key: string]: number }>({});

  const handleQuantityChange = (item: any, change: number) => {
    setQuantities((prev) => {
      const newQuantity = (prev[item.id] || 0) + change;
      // Only allow non-negative quantities
      return { ...prev, [item.id]: Math.max(0, newQuantity) };
    });
  };

  const handleAddToCart = (item: any) => {
    const quantity = quantities[item.id] || 0;
    // Only add to cart if quantity is greater than 0
    if (quantity > 0) {
      for (let i = 0; i < quantity; i++) {
        dispatch(addToCart(item));
      }
    }
  };

  if (loading) {
    return <components.Loader />;
  }

  const renderStatusBar = () => {
    return <components.StatusBar />;
  };

  const renderHeader = () => {
    return <components.Header goBack={true} title='Menu' basket={true} />;
  };

  const renderSearchBar = () => {
    return (
      <View style={{ marginTop: 10, flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginHorizontal: 20, height: 50, marginBottom: 14 }}>
        <View style={{ backgroundColor: theme.colors.white, flex: 1, borderRadius: 10, marginRight: 5, padding: 5, flexDirection: 'row', alignItems: 'center', height: '100%' }}>
          <View style={{ backgroundColor: theme.colors.mainTurquoise, width: 40, height: '100%', borderRadius: 8, justifyContent: 'center', alignItems: 'center', marginRight: 14 }}>
            <svg.SearchSvg />
          </View>
          <TextInput placeholder='Search ...' style={{ flex: 1, ...theme.fonts.DMSans_400Regular, fontSize: 16, color: theme.colors.mainColor }} placeholderTextColor={theme.colors.textColor} />
        </View>
        <TouchableOpacity style={{ backgroundColor: theme.colors.white, borderRadius: 10, height: 50, width: 50, justifyContent: 'center', alignItems: 'center' }}>
          <svg.FilterSvg />
        </TouchableOpacity>
      </View>
    );
  };

  const renderTabs = () => {
    return (
      <View style={{ flexDirection: 'row', justifyContent: 'space-around', marginHorizontal: 20, marginBottom: 14 }}>
        <TouchableOpacity onPress={() => setSelectedTab('services')} style={{ flex: 1, alignItems: 'center', paddingVertical: 10, borderBottomWidth: selectedTab === 'services' ? 2 : 0, borderColor: theme.colors.mainTurquoise }}>
          <Text style={{ color: selectedTab === 'services' ? theme.colors.mainTurquoise : theme.colors.textColor, ...theme.fonts.DMSans_400Regular, fontSize: 16 }}>Services</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => setSelectedTab('products')} style={{ flex: 1, alignItems: 'center', paddingVertical: 10, borderBottomWidth: selectedTab === 'products' ? 2 : 0, borderColor: theme.colors.mainTurquoise }}>
          <Text style={{ color: selectedTab === 'products' ? theme.colors.mainTurquoise : theme.colors.textColor, ...theme.fonts.DMSans_400Regular, fontSize: 16 }}>Products</Text>
        </TouchableOpacity>
      </View>
    );
  };

  const renderContent = () => {
    if (selectedTab === 'products') {
      return (
        <ScrollView showsVerticalScrollIndicator={false}>
          {services.map((item, index) => (
            <components.MenuListItem
              key={item.id}
              item={item}
              lastItem={index === services.length - 1}
              quantity={quantities[item.id] || 0} // Pass current quantity to MenuListItem
              onQuantityChange={handleQuantityChange} // Pass the function to handle quantity changes
              handleAddToCart={handleAddToCart} // Pass the function to handle adding to cart
            />
          ))}
        </ScrollView>
      );
    }
    return null; // Handle other tab content as needed
  };

  return (
    <View style={{ flex: 1, backgroundColor: theme.colors.background }}>
      {renderStatusBar()}
      {renderHeader()}
      {renderSearchBar()}
      {renderTabs()}
      {renderContent()}
    </View>
  );
};

export default Menulist;

















































import { View, Text, TouchableOpacity } from 'react-native';
import React, { PropsWithChildren } from 'react';

import Image from '../custom/Image';
import { theme } from '../../constants';
import { ProductType } from '../../types';
import { useAppNavigation } from '../../hooks';
import ProductNew from '../product/ProductNew';
import ProductName from '../product/ProductName';
import ProductPrice from '../product/ProductPrice';

type Props = PropsWithChildren<{
  item: ProductType;
  lastItem?: boolean;
  onQuantityChange: (item: ProductType, change: number) => void; // New prop for quantity change
  quantity: number; // New prop for current quantity
  handleAddToCart: (item: ProductType) => void; // New prop for adding to cart
}>;

const MenuListItem: React.FC<Props> = ({ item, lastItem, onQuantityChange, quantity, handleAddToCart }): JSX.Element => {
  const navigation = useAppNavigation();

  return (
    <TouchableOpacity
      style={{
        backgroundColor: theme.colors.white,
        borderRadius: 10,
        marginBottom: lastItem ? 0 : 14,
        flexDirection: 'row',
        alignItems: 'center',
      }}
      onPress={() => navigation.navigate('Product', { item })}
    >
      <Image
        source={{ uri: item.image }}
        style={{
          width: 117,
          height: 117,
          margin: 8,
        }}
        imageStyle={{ borderRadius: 10 }}
      />
      <ProductNew
        item={item}
        containerStyle={{
          position: 'absolute',
          top: 0,
          padding: 7,
        }}
      />
      <View style={{ flex: 1, marginRight: 17, marginLeft: 4 }}>
        <ProductName item={item} style={{ marginBottom: 4 }} />
        <Text
          numberOfLines={2}
          style={{
            ...theme.fonts.DMSans_400Regular,
            fontSize: 10,
            color: theme.colors.textColor,
            marginBottom: 4,
            lineHeight: 10 * 1.5,
          }}
        >
          {item.description}
        </Text>
        <Text
          style={{
            ...theme.fonts.DMSans_400Regular,
            fontSize: 10,
            color: theme.colors.textColor,
            marginBottom: 6,
            lineHeight: 10 * 1.5,
          }}
        >
          {item.weight} - {item.calories}
        </Text>
        <ProductPrice item={item} />

        {/* Quantity Control Section */}
        <View style={{ flexDirection: 'row', alignItems: 'center', marginTop: 10 }}>
          <TouchableOpacity
            onPress={() => onQuantityChange(item, -1)} // Decrease quantity
            style={{
              width: 40,
              height: 40,
              justifyContent: 'center',
              alignItems: 'center',
              borderRadius: 5,
              backgroundColor: theme.colors.lightGray,
            }}
          >
            <Text style={{ fontSize: 24 }}>-</Text>
          </TouchableOpacity>
          <Text style={{ fontSize: 18, marginHorizontal: 10 }}>{quantity}</Text>
          <TouchableOpacity
            onPress={() => {
              onQuantityChange(item, 1); // Increase quantity
              handleAddToCart(item); // Automatically add to cart on increment
            }}
            style={{
              width: 40,
              height: 40,
              justifyContent: 'center',
              alignItems: 'center',
              borderRadius: 5,
              backgroundColor: theme.colors.lightGray,
            }}
          >
            <Text style={{ fontSize: 24 }}>+</Text>
          </TouchableOpacity>
        </View>
      </View>
    </TouchableOpacity>
  );
};

export default MenuListItem;



